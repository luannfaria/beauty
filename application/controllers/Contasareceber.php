<?php
/*
 * Generated by CRUDigniter v3.2
 * www.crudigniter.com
 */

class Contasareceber extends CI_Controller{
    function __construct()
    {
        parent::__construct();

        if( (!session_id()) || (!$this->session->userdata('logado'))){
            redirect('dashboard/index');
}
        $this->load->model('Contasareceber_model');
    }

    /*
     * Listing of contasarecebers
     */
    function index()
    {

      $this->load->library('table');
  $this->load->library('pagination');

      $config['base_url'] = base_url() . 'contasareceber/index';
      $config['total_rows'] = $this->Contasareceber_model->get_total();
      $config['per_page'] = 10;
      $config['next_link'] = '>>';
      $config['prev_link'] = '<<';
      $config['full_tag_open'] = '<div class="text-center"><ul class="pagination">';
      $config['full_tag_close'] = '</ul></div>';
      $config['num_tag_open'] = '<li>';
      $config['num_tag_close'] = '</li>';
      $config['cur_tag_open'] = '<li><a style="color: #2D335B"><b>';
      $config['cur_tag_close'] = '</b></a></li>';
      $config['prev_tag_open'] = '<li>';
      $config['prev_tag_close'] = '</li>';
      $config['next_tag_open'] = '<li>';
      $config['next_tag_close'] = '</li>';
      $config['first_link'] = 'Primeira';
      $config['last_link'] = 'Ãšltima';
      $config['first_tag_open'] = '<li>';
      $config['first_tag_close'] = '</li>';
      $config['last_tag_open'] = '<li>';
      $config['last_tag_close'] = '</li>';

      $this->pagination->initialize($config);
        $data['contasarecebers'] = $this->Contasareceber_model->get_current_page_records($config['per_page'],$this->uri->segment(3));

      //  $data['_view'] = 'contasareceber/index';
    //    $this->load->view('layouts/main',$data);
$data["links"] = $this->pagination->create_links();
    $this->load->view('include/header');
    $this->load->view('contasareceber/index',$data);
    $this->load->view('include/footer');
    }

    /*
     * Adding a new contasareceber
     */

     function fiado(){

       $params = array(
   'formarecebimento' => $this->input->post('formarecebimento'),
   'descricao' => $this->input->post('descricao'),
   'numero' => $this->input->post('numero'),
   'valor' => $this->input->post('valor'),
   'datavencimento' => $this->input->post('data'),
   'datapagamento' => $this->input->post('datapagamento'),
   'obs' => $this->input->post('obs'),
       );

       $contasareceber_id = $this->Contasareceber_model->add_contasareceber($params);

       $statusfechado = 2;

       $idag =  $this->input->post('idagendamento');
       $itemstatus = $this->input->post('itemstatus');
       $cor =$this->input->post('cor');

$this->load->model('Calendar_model');
$si =  $this->Calendar_model->update_serv($idag,$itemstatus);
       $dd =  $this->Calendar_model->update_status($idag,$statusfechado);
       $c =$this->Calendar_model->update_cor($idag,$cor);

       redirect('contasareceber/index');

     }
    function add()
    {
        $this->load->library('form_validation');

		$this->form_validation->set_rules('descricao','Descricao','required');
		$this->form_validation->set_rules('valor','Valor','required');
		$this->form_validation->set_rules('datavencimento','Datavencimento','required');

		if($this->form_validation->run())
        {
            $params = array(
				'formarecebimento' => $this->input->post('formarecebimento'),
				'descricao' => $this->input->post('descricao'),
				'numero' => $this->input->post('numero'),
				'valor' => $this->input->post('valor'),
				'datavencimento' => $this->input->post('datavencimento'),
				'datapagamento' => $this->input->post('datapagamento'),
				'obs' => $this->input->post('obs'),
            );

            $contasareceber_id = $this->Contasareceber_model->add_contasareceber($params);
            redirect('contasareceber/index');
        }
        else
        {
			$this->load->model('Formarecebimento_model');
			$data['all_formarecebimentos'] = $this->Formarecebimento_model->get_all_formarecebimentos();

          //  $data['_view'] = 'contasareceber/add';
          //  $this->load->view('layouts/main',$data);

          $this->load->view('include/header');
          $this->load->view('contasareceber/add',$data);
          $this->load->view('include/footer');
        }
    }

    function faturavenda()
    {
        $this->load->library('form_validation');

		$this->form_validation->set_rules('descricao','Descricao','required');
		$this->form_validation->set_rules('valor','Valor','required');
		$this->form_validation->set_rules('datavencimento','Datavencimento','required');


    if($this->input->post('datapagamento')!=NULL){
        $statusfechado = 2;

        $idag =  $this->input->post('idagendamento');
        $itemstatus = $this->input->post('itemstatus');
        $cor =$this->input->post('cor');

$this->load->model('Calendar_model');
$si =  $this->Calendar_model->update_serv($idag,$itemstatus);
        $dd =  $this->Calendar_model->update_status($idag,$statusfechado);
        $c =$this->Calendar_model->update_cor($idag,$cor);


$tipomovi = 1;
        $fluxo = array(

            'forma' => $this->input->post('formarecebimento'),
          'data' => $this->input->post('datapagamento'),
          'valor' => $this->input->post('valor'),
            'descricao' => $this->input->post('descricao'),
          'tipomov' =>$tipomovi,
        );

        $this->load->model('Fluxo_model');

          $d =  $this->Fluxo_model->add($fluxo);
    }

		if($this->form_validation->run())
        {
            $params = array(
				'formarecebimento' => $this->input->post('formarecebimento'),
				'descricao' => $this->input->post('descricao'),
				'numero' => $this->input->post('numero'),
				'valor' => $this->input->post('valor'),
				'datavencimento' => $this->input->post('datavencimento'),
				'datapagamento' => $this->input->post('datapagamento'),
				'obs' => $this->input->post('obs'),
            );

            $contasareceber_id = $this->Contasareceber_model->add_contasareceber($params);
            redirect('calendar/listaagenda');
        }
        else
        {
			$this->load->model('Formarecebimento_model');
			$data['all_formarecebimentos'] = $this->Formarecebimento_model->get_all_formarecebimentos();

          //  $data['_view'] = 'contasareceber/add';
          //  $this->load->view('layouts/main',$data);

        redirect('calendar/listaagenda');
      }
    }


function entradacaixa(){

  $tipomovi = 1;
          $fluxo = array(

              'forma' => $this->input->post('formarecebimento'),
            'data' => $this->input->post('datavencimento'),
            'valor' => $this->input->post('valor'),
              'descricao' => $this->input->post('descricao'),
            'tipomov' =>$tipomovi,
          );

          $this->load->model('Fluxo_model');

            if($this->Fluxo_model->addentrada($fluxo) == true){
          		echo json_encode(array('result' => true));
          	}

          	else{
          		echo json_encode(array('result' =>false));
          	}

}
    /*
     * Editing a contasareceber
     */
    function edit($idcontasareceber)
    {
        // check if the contasareceber exists before trying to edit it
        $data['contasareceber'] = $this->Contasareceber_model->get_contasareceber($idcontasareceber);

        if(isset($data['contasareceber']['idcontasareceber']))
        {
            $this->load->library('form_validation');

			$this->form_validation->set_rules('descricao','Descricao','required');
			$this->form_validation->set_rules('valor','Valor','required');
			$this->form_validation->set_rules('datavencimento','Datavencimento','required');

      if($this->input->post('datapagamento')!=NULL){




  $tipomovi = 1;
          $fluxo = array(

              'forma' => $this->input->post('formarecebimento'),
            'data' => $this->input->post('datapagamento'),
            'valor' => $this->input->post('valor'),
              'descricao' => $this->input->post('descricao'),
            'tipomov' =>$tipomovi,
          );

          $this->load->model('Fluxo_model');

            $d =  $this->Fluxo_model->add($fluxo);
      }

			if($this->form_validation->run())
            {
                $params = array(
					'formarecebimento' => $this->input->post('formarecebimento'),
					'descricao' => $this->input->post('descricao'),
					'numero' => $this->input->post('numero'),
					'valor' => $this->input->post('valor'),
					'datavencimento' => $this->input->post('datavencimento'),
					'datapagamento' => $this->input->post('datapagamento'),
					'obs' => $this->input->post('obs'),
                );

                $this->Contasareceber_model->update_contasareceber($idcontasareceber,$params);
                redirect('contasareceber/index');
            }
            else
            {
				$this->load->model('Formarecebimento_model');
				$data['all_formarecebimentos'] = $this->Formarecebimento_model->get_all_formarecebimentos();

            //    $data['_view'] = 'contasareceber/edit';
              //  $this->load->view('layouts/main',$data);

              $this->load->view('include/header');
              $this->load->view('contasareceber/edit',$data);
              $this->load->view('include/footer');
            }
        }
        else
            show_error('The contasareceber you are trying to edit does not exist.');
    }

    /*
     * Deleting contasareceber
     */
    function remove($idcontasareceber)
    {
        $contasareceber = $this->Contasareceber_model->get_contasareceber($idcontasareceber);

        // check if the contasareceber exists before trying to delete it
        if(isset($contasareceber['idcontasareceber']))
        {
            $this->Contasareceber_model->delete_contasareceber($idcontasareceber);
            redirect('contasareceber/index');
        }
        else
            show_error('The contasareceber you are trying to delete does not exist.');
    }

}
